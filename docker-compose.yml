# =================================================================
# 註解：這是您專案的最終 Docker Compose 設定檔。
# 它定義了所有服務、網路和儲存卷的配置。
# =================================================================

services:
  suzoo_frontend:
    container_name: suzoo_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # [★★ 關鍵修正 1 ★★] 掛載我們最終定稿的 production.conf 設定檔
      - ./frontend/nginx/production.conf:/etc/nginx/conf.d/default.conf
      # [★★ 關鍵修正 2 ★★] 掛載 Let's Encrypt 憑證和續約驗證目錄
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    networks:
      - suzoo-network
    depends_on:
      suzoo_express:
        condition: service_healthy
    restart: unless-stopped

  suzoo_express:
    container_name: suzoo_express
    build:
      context: ./express
      dockerfile: Dockerfile
    command: node server.js
    env_file:
      - ./.env
    volumes:
      - ./express:/app
      - /app/node_modules # 保持匿名 volume 以隔離主機的 node_modules
      - ./uploads:/app/uploads
      - ./credentials:/app/credentials:ro
    networks:
      - suzoo-network
    depends_on:
      suzoo_postgres:
        condition: service_healthy
      suzoo_rabbitmq:
        condition: service_healthy
      suzoo_ganache:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  suzoo_worker:
    container_name: suzoo_worker
    build:
      context: ./express
      dockerfile: Dockerfile
    command: node worker.js
    env_file:
      - ./.env
    volumes:
      - ./express:/app
      - /app/node_modules
      - ./credentials:/app/credentials:ro
    networks:
      - suzoo-network
    depends_on:
      - suzoo_express
      - suzoo_rabbitmq
    restart: unless-stopped

  suzoo_postgres:
    container_name: suzoo_postgres
    image: postgres:15-alpine
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - suzoo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  suzoo_rabbitmq:
    container_name: suzoo_rabbitmq
    image: rabbitmq:3.13-management
    ports: ["15672:15672"]
    env_file: .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - suzoo-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  suzoo_redis:
    container_name: suzoo_redis
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file: .env
    volumes:
      - redis_data:/data
    networks:
      - suzoo-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  suzoo_ipfs:
    container_name: suzoo_ipfs
    image: ipfs/kubo:v0.28.0
    ports: ["5001:5001"]
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - suzoo-network
    restart: unless-stopped

  suzoo_ganache:
    container_name: suzoo_ganache
    build:
      context: ./ganache
      dockerfile: Dockerfile
    env_file: .env
    ports: ["8545:8545"]
    networks:
      - suzoo-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' http://localhost:8545 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  suzoo_fastapi:
    container_name: suzoo_fastapi
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - ./fastapi:/app
    networks:
      - suzoo-network
    depends_on:
      suzoo_postgres:
        condition: service_healthy
    restart: unless-stopped

networks:
  suzoo-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  ipfs_data:
