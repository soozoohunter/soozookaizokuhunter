services:
  suzoo_nginx:
    image: nginx:latest
    container_name: suzoo_nginx
    ports:
      - "80:80"  # 對外開放 80 埠
    volumes:
      - ./nginx/suzoo.conf:/etc/nginx/conf.d/default.conf:ro  # 掛載 Nginx 設定
      - react-static:/usr/share/nginx/html:ro                # 掛載前端編譯後靜態資源
    depends_on:
      suzoo_react:
        condition: service_healthy
      suzoo_express:
        condition: service_healthy
      suzoo_fastapi:
        condition: service_healthy
      suzoo_crawler:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]   # 確認 Nginx 可回應首頁
      interval: 30s
      timeout: 10s
      retries: 5

  suzoo_react:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: suzoo_react
    volumes:
      - react-static:/app/build        # 將前端建置輸出的 build 資料夾與 volume 綁定
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]  # 檢查 React 靜態伺服器首頁
      interval: 30s
      timeout: 10s
      retries: 5

  suzoo_express:
    build:
      context: ./express
      dockerfile: Dockerfile
    container_name: suzoo_express
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]  # 呼叫 Express 的健康檢查端點
      interval: 30s
      timeout: 10s
      retries: 5

  suzoo_fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: suzoo_fastapi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]  # 呼叫 FastAPI 的健康檢查端點
      interval: 30s
      timeout: 10s
      retries: 5

  suzoo_crawler:
    build:
      context: ./crawler
      dockerfile: Dockerfile
    container_name: suzoo_crawler
    depends_on:
      suzoo_fastapi:
        condition: service_healthy    # 等待 FastAPI 啟動後再啟動（未來若需與 FastAPI 互動）
    healthcheck:
      test: ["CMD-SHELL", "echo 1"]   # 簡單回傳 0 狀態表示健康
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  react-static:
