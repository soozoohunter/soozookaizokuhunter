services:
  ##################################################################
  # 1. PostgreSQL (若需要存使用者資料、Email驗證等)
  ##################################################################
  db:
    image: postgres:15
    container_name: suzoo_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - suzoo_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  ##################################################################
  # 2. Geth 私有鏈 (Clique PoA, 單一簽名者 + volume)
  ##################################################################
  geth:
    build:
      context: ./geth
      dockerfile: Dockerfile
    container_name: suzoo_geth
    volumes:
      - geth_data:/data/geth/chaindata                # 保存區塊鏈資料到 volume
      - ./geth/keystore:/data/keystore:ro             # keystore, read-only
      - ./geth/password.txt:/data/password.txt:ro     # 密碼檔, read-only
      - ./geth/genesis.json:/genesis.json:ro          # 創世檔, read-only (init.sh 如果需要)
    networks:
      - suzoo_net
    ports:
      - "8545:8545"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' http://localhost:8545 || exit 1"
        ]
      interval: 10s
      timeout: 5s
      retries: 20

  ##################################################################
  # 3. IPFS (可選)
  ##################################################################
  ipfs:
    build:
      context: ./ipfs
      dockerfile: Dockerfile
    container_name: suzoo_ipfs
    networks:
      - suzoo_net
    ports:
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 10s
      timeout: 5s
      retries: 5

  ##################################################################
  # 4. FastAPI (後端 + Web3.py + KaiShield.sol 互動)
  ##################################################################
  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: suzoo_fastapi
    networks:
      - suzoo_net
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      geth:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - BLOCKCHAIN_RPC_URL=http://geth:8545
      - BLOCKCHAIN_PRIVATE_KEY=0x111122223333444455556666777788889999aaaabbbbccccddddeeeeffff0000
      - CONTRACT_ADDRESS=0x110cb167ea55c3467cd82fdef9dd570b7d3f30b8
      - NODE_ENV=production
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8000/health | grep '\"status\":\"ok\"'"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 300s

  ##################################################################
  # 5. Express (如前端需要 Node.js API / Socket.io 等)
  ##################################################################
  express:
    build:
      context: ./express
      dockerfile: Dockerfile
    container_name: suzoo_express
    networks:
      - suzoo_net
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      fastapi:
        condition: service_healthy
    environment:
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - BLOCKCHAIN_RPC_URL=http://geth:8545
      - CONTRACT_ADDRESS=0x110cb167ea55c3467cd82fdef9dd570b7d3f30b8
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ##################################################################
  # 6. Crawler (侵權偵測核心, 模擬外部平台爬蟲, 可整合 IPFS / openCV)
  ##################################################################
  crawler:
    build:
      context: ./crawler
      dockerfile: Dockerfile
    container_name: suzoo_crawler
    networks:
      - suzoo_net
    depends_on:
      express:
        condition: service_started
    environment:
      - RAPIDAPI_KEY=${RAPIDAPI_KEY}
      - BLOCKCHAIN_RPC_URL=http://geth:8545

  ##################################################################
  # 7. 前端 (React)
  ##################################################################
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: suzoo_frontend
    networks:
      - suzoo_net
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production

  ##################################################################
  # 8. Nginx (反向代理)
  ##################################################################
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: suzoo_nginx
    networks:
      - suzoo_net
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      express:
        condition: service_healthy
      fastapi:
        condition: service_healthy
      frontend:
        condition: service_started
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/wait-for-it.sh:/wait-for-it.sh
    restart: unless-stopped

volumes:
  db_data:
  geth_data:
  ipfs_data:

networks:
  suzoo_net:
    driver: bridge
