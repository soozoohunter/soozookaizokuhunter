services:
  suzoo_postgres:
    container_name: suzoo_postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - suzoo_net

  suzoo_redis:
    container_name: suzoo_redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_express:
    container_name: suzoo_express
    build:
      context: ./express
      dockerfile: Dockerfile
    volumes:
      - uploads_data:/app/uploads
      - ./credentials:/app/credentials:ro
      - ./express/fonts:/app/express/fonts:ro
      - ./express/debugShots:/app/debugShots
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      IPFS_API_URL: ${IPFS_API_URL}
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL}
      BLOCKCHAIN_PRIVATE_KEY: ${BLOCKCHAIN_PRIVATE_KEY}
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      FASTAPI_URL: ${FASTAPI_URL}
      # MILVUS_HOST 與 MILVUS_PORT 不再被 python-vector-service 使用
      # 但為避免其他服務可能引用到，暫時保留
      MILVUS_HOST: "localhost"
      MILVUS_PORT: "19530"
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      EMAIL_FROM: ${EMAIL_FROM}
      PYTHON_VECTOR_URL: http://suzoo_python_vector:8000
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
      TINEYE_API_KEY: ${TINEYE_API_KEY}
      RAPIDAPI_KEY: ${RAPIDAPI_KEY}
      TIKTOK_HOST: ${TIKTOK_HOST}
      FACEBOOK_HOST: ${FACEBOOK_HOST}
      INSTAGRAM_HOST: ${INSTAGRAM_HOST}
      YOUTUBE_HOST: ${YOUTUBE_HOST}
      PUPPETEER_HEADLESS: "new"
    depends_on:
      suzoo_postgres:
        condition: service_healthy
      suzoo_ipfs:
        condition: service_started
      suzoo_ganache:
        condition: service_started
      # ★★★ 已移除對外部 milvus 容器的依賴 ★★★
    ports:
      - "3000:3000"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_frontend:
    container_name: suzoo_frontend
    build:
      context: ./frontend
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.suzookaizokuhunter.com}
    image: suzookaizokuhunter-frontend
    depends_on:
      - suzoo_express
      - suzoo_fastapi
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/suzoo.conf:/etc/nginx/conf.d/default.conf
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_fastapi:
    container_name: suzoo_fastapi
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - suzoo_postgres
    ports:
      - "8000:8000"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_ganache:
    container_name: suzoo_ganache
    image: trufflesuite/ganache-cli:latest
    command: >
      --noVMErrorsOnRPCResponse
      --account="0xc3ded7eaec361d5b94a495e390be497a7fd54173e6ca6f77df071b22cb7bd4d1,10000000000000000000"
    ports:
      - "8545:8545"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_ipfs:
    container_name: suzoo_ipfs
    image: ipfs/go-ipfs:latest
    ports:
      - "8080:8080"
      - "5001:5001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:5001/api/v0/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_rabbitmq:
    container_name: suzoo_rabbitmq
    image: rabbitmq:3.11-management
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_python_vector:
    container_name: suzoo_python_vector
    build:
      context: ./python-vector-service
      dockerfile: Dockerfile
    # ★★★ 已移除對外部 milvus 容器的依賴 ★★★
    volumes:
      # ★★★ 新增一個數據卷，給 Milvus Lite 用來永久保存數據 ★★★
      - milvus_lite_data:/app/milvus_data
    ports:
      - "8001:8000"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_crawler_runner:
    container_name: suzoo_crawler_runner
    build:
      context: ./python_crawlers
      dockerfile: Dockerfile
    depends_on:
      - suzoo_rabbitmq
    ports:
      - "8002:8000"
    networks:
      - suzoo_net
    restart: unless-stopped

  api_service:
    container_name: api_service
    build:
      context: ./api_service
    ports:
      - "3002:3000"
    volumes:
      - ./api_service/uploads:/app/uploads
      - ./media_output:/app/../media_output
    environment:
      AI_SERVICE_URL: "http://ai_service:5000"
    depends_on:
      - ai_service
    networks:
      - suzoo_net
    restart: unless-stopped

  ai_service:
    container_name: ai_service
    build:
      context: ./ai_service
    volumes:
      - ./api_service/uploads:/app/uploads
    networks:
      - suzoo_net
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  # ★★★ 新增給 Milvus Lite 使用的數據卷 ★★★
  milvus_lite_data:

networks:
  suzoo_net:
    driver: bridge
