services:
  ######################################################################
  #  (1) 您原先的服務: suzoo_postgres, suzoo_express, suzoo_frontend 等
  ######################################################################

  suzoo_postgres:
    container_name: suzoo_postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - suzoo_net
    restart: unless-stopped

  ######################################################################
  # (A) suzoo_express
  ######################################################################
  suzoo_express:
    container_name: suzoo_express
    build:
      context: ./express
      dockerfile: Dockerfile
    volumes:
      - ./express/fonts:/fonts:ro
      - ./express/debugShots:/app/debugShots
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      IPFS_API_URL: ${IPFS_API_URL}
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL}
      BLOCKCHAIN_PRIVATE_KEY: ${BLOCKCHAIN_PRIVATE_KEY}
      CONTRACT_ADDRESS: ${CONTRACT_ADDRESS}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      FASTAPI_URL: ${FASTAPI_URL}
      MILVUS_HOST: ${MILVUS_HOST}
      MILVUS_PORT: ${MILVUS_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      EMAIL_FROM: ${EMAIL_FROM}
      PYTHON_VECTOR_URL: http://suzoo_python_vector:8000
    depends_on:
      - suzoo_postgres
      - suzoo_ipfs
      - suzoo_ganache
      - suzoo_milvus
    ports:
      - "3000:3000"
    networks:
      - suzoo_net
    restart: unless-stopped

  ######################################################################
  # (B) suzoo_frontend
  ######################################################################
  suzoo_frontend:
    container_name: suzoo_frontend
    image: nginx:alpine
    depends_on:
      - suzoo_express
      - suzoo_fastapi
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/suzoo.conf:/etc/nginx/conf.d/suzoo_https.conf:ro
      - ./nginx/suzoo.conf:/etc/nginx/conf.d/suzoo_http.conf:ro
      - ./frontend/build:/usr/share/nginx/html:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    command: ["/bin/sh", "-c", "rm -f /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"]
    networks:
      - suzoo_net
    restart: unless-stopped

  ######################################################################
  # (C) 其餘服務 (suzoo_fastapi, suzoo_ganache, suzoo_ipfs, etc.)
  ######################################################################

  suzoo_fastapi:
    container_name: suzoo_fastapi
    image: soozookaizokuhunter-suzoo_fastapi
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - suzoo_postgres
    ports:
      - "8000:8000"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_ganache:
    container_name: suzoo_ganache
    image: trufflesuite/ganache-cli:latest
    command: >
      --noVMErrorsOnRPCResponse
      --account="0xc3ded7eaec361d5b94a495e390be497a7fd54173e6ca6f77df071b22cb7bd4d1,10000000000000000000"
    ports:
      - "8545:8545"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_ipfs:
    container_name: suzoo_ipfs
    image: ipfs/go-ipfs:latest
    ports:
      - "8080:8080"
      - "5001:5001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:5001/api/v0/version || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_etcd:
    container_name: suzoo_etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      ETCD_NAME: suzoo_etcd
      ETCD_ADVERTISE_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://suzoo_etcd:2380
      ETCD_INITIAL_CLUSTER: suzoo_etcd=http://suzoo_etcd:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: etcd-cluster
    ports:
      - "2379:2379"
      - "2380:2380"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_minio:
    container_name: suzoo_minio
    image: minio/minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    command: server /data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_milvus:
    container_name: suzoo_milvus
    image: milvusdb/milvus:v2.3.11
    depends_on:
      - suzoo_etcd
      - suzoo_minio
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: "suzoo_etcd:2379"
      MINIO_ADDRESS: "suzoo_minio:9000"
      MINIO_ACCESS_KEY_ID: "admin"
      MINIO_SECRET_ACCESS_KEY: "admin123"
      MINIO_USE_SSL: "false"
    ports:
      - "19530:19530"
      - "19121:19121"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_rabbitmq:
    container_name: suzoo_rabbitmq
    image: rabbitmq:3.11-management
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_python_vector:
    container_name: suzoo_python_vector
    image: soozookaizokuhunter-suzoo_python_vector
    depends_on:
      - suzoo_milvus
    ports:
      - "8001:8000"
    networks:
      - suzoo_net
    restart: unless-stopped

  suzoo_crawler_runner:
    container_name: suzoo_crawler_runner
    image: soozookaizokuhunter-suzoo_crawler_runner
    depends_on:
      - suzoo_rabbitmq
    ports:
      - "8002:8000"
    networks:
      - suzoo_net
    restart: unless-stopped

  ######################################################################
  # =========== 以下為新增的兩個服務 (api_service / ai_service) ==========
  ######################################################################
  api_service:
    container_name: api_service
    build:
      context: ./api_service
    # 若 3000 已被占用，可改 "3002:3000" 或其他空閒 port
    ports:
      - "3002:3000"
    volumes:
      - type: bind
        source: ./api_service/uploads
        target: /app/uploads
      - type: bind
        source: ./media_output
        target: /app/../media_output
    # 如果程式端需要從環境變數得知 AI_SERVICE_URL，可自行加：
    environment:
      AI_SERVICE_URL: "http://ai_service:3000"
    depends_on:
      - ai_service
    networks:
      - suzoo_net
    restart: unless-stopped

  ai_service:
    container_name: ai_service
    build:
      context: ./ai_service
    # 若您需要讓其他服務呼叫 ai_service 的 port，可自行加 expose 或 ports
    # 例如： expose:
    #         - "3000"
    volumes:
      - type: bind
        source: ./api_service/uploads
        target: /app/uploads
    networks:
      - suzoo_net
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  suzoo_net:
    driver: bridge
