services:
  # 1. PostgreSQL
  suzoo_postgres:
    image: postgres:15-alpine
    container_name: suzoo_postgres
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "suzoo_db"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres_data:/var/lib/postgresql/data
    networks:
      - suzoo_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d suzoo_db || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  # 2. Geth (Clique PoA) - suzoo_geth
  suzoo_geth:
    build:
      context: ./geth
      dockerfile: Dockerfile
    container_name: suzoo_geth
    networks:
      - suzoo_network
    volumes:
      - geth_data:/geth/data
    ports:
      - "8545:8545"      # RPC
      - "8546:8546"      # WebSocket
      - "30303:30303"    # P2P
      - "30303:30303/udp"
    healthcheck:
      test: ["CMD", "geth", "attach", "http://localhost:8545", "--exec", "eth.blockNumber"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 3. IPFS
  suzoo_ipfs:
    image: ipfs/go-ipfs:latest
    container_name: suzoo_ipfs
    networks:
      - suzoo_network
    ports:
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs

  # 4. FastAPI
  suzoo_fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: suzoo_fastapi
    depends_on:
      suzoo_postgres:
        condition: service_healthy
      suzoo_geth:
        condition: service_healthy
      suzoo_ipfs:
        condition: service_started
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@suzoo_postgres:5432/suzoo_db"
      ETH_RPC_URL: "http://suzoo_geth:8545"
      IPFS_API_URL: "http://suzoo_ipfs:5001"
    networks:
      - suzoo_network
    expose:
      - "8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8000/health | grep '\"status\":\"ok\"'"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 120s

  # 5. Express
  suzoo_express:
    build:
      context: ./express
      dockerfile: Dockerfile
    container_name: suzoo_express
    depends_on:
      suzoo_postgres:
        condition: service_healthy
      suzoo_geth:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@suzoo_postgres:5432/suzoo_db"
      ETH_RPC_URL: "http://suzoo_geth:8545"
      IPFS_API_URL: "http://suzoo_ipfs:5001"
      NODE_ENV: "production"
      PORT: "3000"
    networks:
      - suzoo_network
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 6. React 前端
  suzoo_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: suzoo_frontend
    depends_on:
      suzoo_express:
        condition: service_healthy
      suzoo_fastapi:
        condition: service_healthy
    networks:
      - suzoo_network
    environment:
      NODE_ENV: "production"
    expose:
      - "5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # 7. Nginx
  suzoo_nginx:
    image: nginx:latest
    container_name: suzoo_nginx
    depends_on:
      suzoo_express:
        condition: service_healthy
      suzoo_fastapi:
        condition: service_healthy
      suzoo_frontend:
        condition: service_started
    networks:
      - suzoo_network
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  suzoo_network:
    driver: bridge

volumes:
  postgres_data:
  geth_data:
  ipfs_data:
