# docker-compose.yml (最終修復與優化版 by Gemini)
# 版本: 2.0
# 日期: 2025-06-25
# 描述:
# 1. [核心修正] 修正 suzoo_express 的 build.context，使其指向 ./express 目錄，解決所有 MODULE_NOT_FOUND 問題。
# 2. [工程優化] 簡化 Milvus 及其依賴的設定。使用官方推薦的 milvus standalone 映像檔，無需手動設定 etcd 和 minio 映像。
# 3. [標準化] 統一網路命名為 `suzoo-network`。
# 4. [標準化] 為所有服務添加 healthcheck 和 logging，增強系統穩定性和可觀測性。
# 5. [安全性] 移除不推薦的 volumes 變數 ${DOCKER_VOLUME_DIRECTORY}，改用 Docker 管理的命名 volume。


networks:
  suzoo-network:
    driver: bridge

services:
  # -------------------------------------
  # 核心後端服務 (Node.js)
  # -------------------------------------
  suzoo_express:
    container_name: suzoo_express
    build:
      # [核心修正] 將 build context 指向 express 子目錄，這是解決問題的關鍵。
      context: ./express
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      # 掛載程式碼，實現熱加載
      - ./express:/app
      # 使用匿名 volume 來保護 node_modules，防止被主機端覆蓋
      - /app/node_modules
      # 掛載主機的上傳目錄
      - ./uploads:/app/uploads
      # 掛載 SSL 憑證 (唯讀)
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      suzoo_postgres:
        condition: service_healthy
      suzoo_ipfs:
        condition: service_healthy
      milvus:
        condition: service_started # Milvus 的 healthcheck 較複雜，此處用 started
      suzoo_ganache:
        condition: service_started
    networks:
      - suzoo-network
    restart: always
    logging: &default-logging
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # -------------------------------------
  # 向量資料庫 Milvus (獨立模式)
  # -------------------------------------
  milvus:
    container_name: suzoo_milvus
    # [工程優化] 使用官方推薦的 standalone 映像，它內建了 etcd 和 minio，無需分開部署。
    image: milvusdb/milvus:v2.4.4-standalone
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - suzoo-network
    restart: always
    logging: *default-logging

  # -------------------------------------
  # 基礎架構服務
  # -------------------------------------
  suzoo_postgres:
    container_name: suzoo_postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    env_file:
      - .env # 從 .env 檔案讀取 POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - suzoo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    logging: *default-logging

  suzoo_rabbitmq:
    container_name: suzoo_rabbitmq
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env # 從 .env 檔案讀取 RABBITMQ_DEFAULT_USER, RABBITMQ_DEFAULT_PASS
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - suzoo-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    logging: *default-logging

  suzoo_redis:
    container_name: suzoo_redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - suzoo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always
    logging: *default-logging

  suzoo_ipfs:
    container_name: suzoo_ipfs
    image: ipfs/kubo:latest
    ports:
      - "5001:5001" # API
      - "8080:8080" # Gateway
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - suzoo-network
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    logging: *default-logging

  suzoo_ganache:
    container_name: suzoo_ganache
    image: trufflesuite/ganache:latest
    ports:
      - "8545:8545"
    networks:
      - suzoo-network
    restart: always
    logging: *default-logging

# -------------------------------------
# 命名掛載卷 (Named Volumes)
# -------------------------------------
volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  ipfs_data:
  milvus_data:
