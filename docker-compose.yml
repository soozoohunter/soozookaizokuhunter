services:
  ##################################################################
  # 1. PostgreSQL
  ##################################################################
  db:
    image: postgres:15
    container_name: suzoo_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    # 若要自訂 pg_hba.conf,可加:
    # volumes:
    #   - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    #   - ./db/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    #   command: ["postgres", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  ##################################################################
  # 2. Geth 私有鏈 (如有需要)
  ##################################################################
  geth:
    build:
      context: ./geth
      dockerfile: Dockerfile
    container_name: suzoo_geth
    volumes:
      - ./geth/keystore:/data/keystore
      - ./geth/password.txt:/data/password.txt
    ports:
      - "8545:8545"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-X", "POST",
          "-H", "Content-Type: application/json",
          "--data", "{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}",
          "http://localhost:8545"
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  ##################################################################
  # 3. IPFS (可選)
  ##################################################################
  ipfs:
    build:
      context: ./ipfs
      dockerfile: Dockerfile
    container_name: suzoo_ipfs
    ports:
      - "5001:5001"
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 10s
      timeout: 5s
      retries: 5

  ##################################################################
  # 4. FastAPI
  ##################################################################
  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: suzoo_fastapi
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - BLOCKCHAIN_RPC_URL=${BLOCKCHAIN_RPC_URL}
      - BLOCKCHAIN_PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      # 其餘您需要的環境變量 …
      - NODE_ENV=${NODE_ENV}
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8000/health | grep '\"status\":\"ok\"'"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 180s

  ##################################################################
  # 5. Express (Node.js)
  ##################################################################
  express:
    build:
      context: ./express
      dockerfile: Dockerfile
    container_name: suzoo_express
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      fastapi:
        condition: service_healthy
    environment:
      - PORT=3000
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - RAPIDAPI_KEY=${RAPIDAPI_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - BLOCKCHAIN_RPC_URL=${BLOCKCHAIN_RPC_URL}
      - BLOCKCHAIN_PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
      - CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
      - DMCA_AUTO_NOTIFY=${DMCA_AUTO_NOTIFY}
      - NODE_ENV=${NODE_ENV}
      - STRIPE_SECRET=${STRIPE_SECRET}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  ##################################################################
  # 6. 爬蟲 Crawler (偵測侵權)
  ##################################################################
  crawler:
    build:
      context: ./crawler
      dockerfile: Dockerfile
    container_name: suzoo_crawler
    depends_on:
      express:
        condition: service_started
    environment:
      - RAPIDAPI_KEY=${RAPIDAPI_KEY}

  ##################################################################
  # 7. 前端 (Frontend)
  ##################################################################
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: suzoo_frontend
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production

  ##################################################################
  # 8. Nginx (反向代理)
  ##################################################################
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: suzoo_nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      express:
        condition: service_healthy
      fastapi:
        condition: service_healthy
      frontend:
        condition: service_started
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/wait-for-it.sh:/wait-for-it.sh

# (如需自訂網路，可加下方)
# networks:
#   default:
#     name: soozookaizokuhunter_net
#     driver: bridge
