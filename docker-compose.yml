version: '3.8'

services:
  db:
    image: postgres:15
    container_name: kai_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - kainet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  geth:
    build: ./geth
    container_name: kai_geth
    networks:
      - kainet
    ports:
      - "8545:8545"
      - "30303:30303"
      - "30303:30303/udp"
    restart: unless-stopped

  ipfs:
    build: ./ipfs
    container_name: kai_ipfs
    networks:
      - kainet
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    restart: unless-stopped

  express:
    build: ./express
    container_name: kai_express
    depends_on:
      db:
        condition: service_healthy
      geth:
        condition: service_started
      ipfs:
        condition: service_started
    env_file:
      - .env
    networks:
      - kainet
    restart: unless-stopped

  fastapi:
    build: ./fastapi
    container_name: kai_fastapi
    depends_on:
      db:
        condition: service_healthy  # 等待資料庫健康檢查通過
      geth:
        condition: service_started
      ipfs:
        condition: service_started
    env_file:
      - .env
    networks:
      - kainet
    restart: unless-stopped

  crawler:
    build: ./crawler
    container_name: kai_crawler
    env_file:
      - .env
    networks:
      - kainet
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: kai_frontend
    depends_on:
      - express
      - fastapi
    env_file:
      - .env
    networks:
      - kainet
    volumes:
      - ./frontend/dist:/usr/share/nginx/html  # 明確掛載靜態文件
    expose:
      - "3001"  # 暴露端口給 Nginx 使用
    restart: unless-stopped

  nginx:
    build: ./nginx
    container_name: kai_nginx
    depends_on:
      - frontend
      - fastapi
      - express
      - crawler
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/dist:/usr/share/nginx/html  # 與前端掛載路徑一致
    networks:
      - kainet
    restart: unless-stopped

volumes:
  db_data:
    driver: local

networks:
  kainet:
    driver: bridge
