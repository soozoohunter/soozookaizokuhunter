version: "3.9"

services:
  # === PostgreSQL ===
  suzoo_postgres:
    image: postgres:15-alpine
    container_name: suzoo_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - suzoo_db_data:/var/lib/postgresql/data
    networks:
      - suzoo_net
    restart: unless-stopped

  # === Ganache (區塊鏈本地測試) ===
  suzoo_ganache:
    image: trufflesuite/ganache-cli:latest
    container_name: suzoo_ganache
    command: >
      ganache-cli
      --host 0.0.0.0
      --port 8545
      --accounts 4
      --defaultBalanceEther 100
      --account "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef,100000000000000000000"
    ports:
      - "8545:8545"
    networks:
      - suzoo_net
    restart: unless-stopped

  # === IPFS (去中心化檔案系統) ===
  suzoo_ipfs:
    image: ipfs/go-ipfs:latest
    container_name: suzoo_ipfs
    command: daemon
    ports:
      - "5001:5001"
      - "8080:8080"
    networks:
      - suzoo_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/v0/version"]
      interval: 20s
      timeout: 10s
      retries: 3

  # === FastAPI (Python API) ===
  suzoo_fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: suzoo_fastapi
    depends_on:
      - suzoo_postgres
      - suzoo_ganache
      - suzoo_ipfs
    env_file:
      - .env
    networks:
      - suzoo_net
    expose:
      - "8000"
    restart: unless-stopped

  # === etcd (Milvus 依賴) ===
  suzoo_etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: suzoo_etcd
    environment:
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://suzoo_etcd:2379
    networks:
      - suzoo_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health", "--endpoints=http://localhost:2379"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # === Milvus (向量資料庫) ===
  suzoo_milvus:
    image: milvusdb/milvus:v2.3.11
    container_name: suzoo_milvus
    command: [ "milvus", "run", "standalone" ]
    restart: unless-stopped
    ports:
      - "19530:19530"
      - "19121:19121"
    networks:
      - suzoo_net
    volumes:
      - suzoo_milvus_data:/var/lib/milvus
    environment:
      - ETCD_ENDPOINTS=http://suzoo_etcd:2379
    depends_on:
      suzoo_etcd:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 5s

  # === Python Vector Service (選擇性: Python 端向量檢索或爬蟲) ===
  suzoo_python_vector:
    build:
      context: ./python_crawlers
      dockerfile: Dockerfile
    container_name: suzoo_python_vector
    depends_on:
      - suzoo_milvus
    networks:
      - suzoo_net
    ports:
      - "8001:8000"  # 若需要對外暴露Python服務API, 否則只在內部使用
    environment:
      - MILVUS_HOST=suzoo_milvus
      - MILVUS_PORT=19530
    restart: unless-stopped

  # === RabbitMQ (Celery 任務隊列) ===
  suzoo_rabbitmq:
    image: rabbitmq:3.9-management
    container_name: suzoo_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=123456
    ports:
      - "5672:5672"    # Broker port
      - "15672:15672"  # 方便在瀏覽器查看RabbitMQ管理介面
    networks:
      - suzoo_net
    restart: unless-stopped

  # === Celery Worker (後台爬蟲, Email 報告, S3 上傳等) ===
  suzoo_celery:
    build:
      context: ./python_crawlers
      dockerfile: Dockerfile.celery
    container_name: suzoo_celery
    depends_on:
      - suzoo_rabbitmq
      - suzoo_milvus
    environment:
      - BROKER_URL=amqp://admin:123456@suzoo_rabbitmq:5672//
      - RESULT_BACKEND=rpc://
      - MILVUS_HOST=suzoo_milvus
      - MILVUS_PORT=19530
    networks:
      - suzoo_net
    restart: unless-stopped

  # === Express (Node.js 後端) ===
  suzoo_express:
    build:
      context: ./express
      dockerfile: Dockerfile
    container_name: suzoo_express
    env_file:
      - .env
    networks:
      - suzoo_net
    expose:
      - "3000"
    restart: unless-stopped
    # 如需對外映射: 
    # ports:
    #   - "3000:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./debugShots:/app/debugShots
    # 若 Express 裡也要連接 RabbitMQ 或 Celery, 請確保 environment 中包含 broker 連線資訊
    depends_on:
      - suzoo_milvus
      - suzoo_postgres
      - suzoo_fastapi
      - suzoo_python_vector
      - suzoo_celery

  # === Frontend (React + Nginx) ===
  suzoo_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: suzoo_frontend
    depends_on:
      - suzoo_express
      - suzoo_fastapi
    env_file:
      - .env
    networks:
      - suzoo_net
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/letsencrypt:/etc/nginx/certs:ro
      - ./frontend/suzoo.conf:/etc/nginx/conf.d/default.conf:ro
      - ./uploads:/app/uploads:ro
    restart: unless-stopped

networks:
  suzoo_net:
    driver: bridge

volumes:
  suzoo_db_data:
  suzoo_milvus_data:
