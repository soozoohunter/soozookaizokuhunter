version: '3.8'

services:
  ###################################################################
  # 1. PostgreSQL
  ###################################################################
  postgres:
    image: postgres:15-alpine
    container_name: suzoo_postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - db_data:/var/lib/postgresql/data
    networks:
      - backend-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      retries: 5

  ###################################################################
  # 2. Ganache (本地區塊鏈)
  ###################################################################
  ganache:
    image: trufflesuite/ganache-cli:latest
    container_name: suzoo_ganache
    command: ganache-cli --host 0.0.0.0 --port 8545 --accounts 5 --defaultBalanceEther 100
    ports:
      - "8545:8545"
    networks:
      - backend-net

  ###################################################################
  # 3. IPFS
  ###################################################################
  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: suzoo_ipfs
    ports:
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    command: >
      sh -c "
      if [ ! -e /data/ipfs/config ]; then
        ipfs init && \
        ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001 && \
        ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080;
      fi;
      ipfs daemon --migrate=true
      "
    networks:
      - backend-net

  ###################################################################
  # 4. FastAPI
  ###################################################################
  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: suzoo_fastapi
    depends_on:
      ganache:
        condition: service_started
      ipfs:
        condition: service_started
    env_file:
      - .env
    expose:
      - "8000"
    networks:
      - backend-net

  ###################################################################
  # 5. Express (後端)
  ###################################################################
  express:
    build:
      context: ./express
      dockerfile: Dockerfile
    container_name: suzoo_express
    depends_on:
      postgres:
        condition: service_healthy
      ganache:
        condition: service_started
      ipfs:
        condition: service_started
      fastapi:
        condition: service_started
    env_file:
      - .env
    expose:
      - "3000"
    networks:
      - backend-net

  ###################################################################
  # 6. Crawler (爬蟲/DMCA)
  ###################################################################
  crawler:
    build:
      context: ./crawler
      dockerfile: Dockerfile
    container_name: suzoo_crawler
    depends_on:
      - express
      - postgres
    env_file:
      - .env
    networks:
      - backend-net

  ###################################################################
  # 7. React 前端
  ###################################################################
  react:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: suzoo_frontend
    depends_on:
      - express
      - fastapi
    expose:
      - "3000"
    networks:
      - backend-net

  ###################################################################
  # 8. Nginx 反向代理
  ###################################################################
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: suzoo_nginx
    depends_on:
      - react
      - express
      - fastapi
    networks:
      - backend-net
    ports:
      - "80:80"
    restart: unless-stopped

volumes:
  db_data:
  ipfs_data:

networks:
  backend-net:
    driver: bridge
