services:
  suzoo_postgres:
    image: postgres:15-alpine
    container_name: suzoo_postgres
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-postgres}"
      POSTGRES_DB: "${POSTGRES_DB:-suzoo_db}"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - suzoo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-suzoo_db} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  suzoo_geth:
    build:
      context: ./geth
      dockerfile: Dockerfile
    container_name: suzoo_geth
    networks:
      - suzoo_network
    ports:
      - "8545:8545"
      - "30303:30303"
    volumes:
      - geth_data:/geth/data
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' -H 'Content-Type: application/json' http://localhost:8545 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  suzoo_ipfs:
    image: ipfs/go-ipfs:latest
    container_name: suzoo_ipfs
    networks:
      - suzoo_network
    ports:
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs

  suzoo_fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    container_name: suzoo_fastapi
    depends_on:
      suzoo_postgres:
        condition: service_healthy
      suzoo_geth:
        condition: service_healthy
      suzoo_ipfs:
        condition: service_started
    environment:
      DATABASE_URL: "${DATABASE_URL}"
      ETH_RPC_URL: "${ETH_RPC_URL}"
      IPFS_API_URL: "${IPFS_API_URL}"
      NODE_ENV: "${NODE_ENV:-production}"
    networks:
      - suzoo_network
    expose:
      - "8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8000/health | grep '\"status\":\"ok\"'"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 120s

  suzoo_express:
    build:
      context: ./express
      dockerfile: Dockerfile
    container_name: suzoo_express
    depends_on:
      suzoo_postgres:
        condition: service_healthy
      suzoo_geth:
        condition: service_healthy
    environment:
      DATABASE_URL: "${DATABASE_URL}"
      ETH_RPC_URL: "${ETH_RPC_URL}"
      IPFS_API_URL: "${IPFS_API_URL}"
      JWT_SECRET: "${JWT_SECRET}"
      CLOUDINARY_CLOUD_NAME: "${CLOUDINARY_CLOUD_NAME}"
      CLOUDINARY_API_KEY: "${CLOUDINARY_API_KEY}"
      CLOUDINARY_API_SECRET: "${CLOUDINARY_API_SECRET}"
      RAPIDAPI_KEY: "${RAPIDAPI_KEY}"
      NODE_ENV: "${NODE_ENV:-production}"
      PORT: "3000"
    networks:
      - suzoo_network
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  suzoo_crawler:
    build:
      context: ./crawler
      dockerfile: Dockerfile
    container_name: suzoo_crawler
    depends_on:
      suzoo_fastapi:
        condition: service_started
      suzoo_postgres:
        condition: service_healthy
    environment:
      ETH_RPC_URL: "${ETH_RPC_URL}"
      DATABASE_URL: "${DATABASE_URL}"
      RAPIDAPI_KEY: "${RAPIDAPI_KEY}"
    networks:
      - suzoo_network

  suzoo_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: suzoo_frontend
    networks:
      - suzoo_network
    environment:
      NODE_ENV: "${NODE_ENV:-production}"
    volumes:
      - ./frontend/build:/app/build

  suzoo_nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: suzoo_nginx
    depends_on:
      suzoo_express:
        condition: service_healthy
      suzoo_fastapi:
        condition: service_healthy
      suzoo_frontend:
        condition: service_started
    networks:
      - suzoo_network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/build:/usr/share/nginx/html:ro
    restart: unless-stopped

networks:
  suzoo_network:
    driver: bridge

volumes:
  postgres_data:
  geth_data:
  ipfs_data:
