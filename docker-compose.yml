version: "3.8"

services:
  db:
    image: postgres:15
    container_name: suzoo_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - suzoo_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  geth:
    build: ./geth
    container_name: suzoo_geth
    networks:
      - suzoo_net
    expose:
      - "8545"
      - "30303"
      - "30303/udp"
    volumes:
      - geth_data:/root/.ethereum

  ipfs:
    build: ./ipfs
    container_name: suzoo_ipfs
    networks:
      - suzoo_net
    expose:
      - "4001"
      - "5001"
      - "8080"
    volumes:
      - ipfs_data:/data/ipfs

  express:
    build: ./express
    container_name: suzoo_express
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - suzoo_net
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  fastapi:
    build: ./fastapi
    container_name: suzoo_fastapi
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - suzoo_net
    expose:
      - "8000"

  crawler:
    build: ./crawler
    container_name: suzoo_crawler
    env_file:
      - .env
    networks:
      - suzoo_net
    expose:
      - "8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build: ./frontend
    container_name: suzoo_frontend
    env_file:
      - .env
    networks:
      - suzoo_net
    expose:
      - "80"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: suzoo_nginx
    depends_on:
      crawler:
        condition: service_healthy
      # 您若還需依賴 fastapi, express, frontend, etc. 也可加
    networks:
      - suzoo_net
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/wait-for-it.sh:/wait-for-it.sh:ro
      - /etc/letsencrypt/live/suzookaizokuhunter.com:/etc/letsencrypt/live/suzookaizokuhunter.com:ro
      - /etc/letsencrypt/archive/suzookaizokuhunter.com:/etc/letsencrypt/archive/suzookaizokuhunter.com:ro
    # 若 Dockerfile 中已指定 CMD, 可省略 command
    # or command: ["nginx","-g","daemon off;"]
    restart: unless-stopped

volumes:
  db_data:
  geth_data:
  ipfs_data:

networks:
  suzoo_net:
    driver: bridge
