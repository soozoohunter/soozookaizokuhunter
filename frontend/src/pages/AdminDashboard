// src/pages/AdminDashboard.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

export default function AdminDashboard() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const [showAddForm, setShowAddForm] = useState(false);
  const [newUser, setNewUser] = useState({
    email: '',
    userName: '',
    password: '',
    role: 'user',
    plan: 'free',
    serialNumber: '',
    socialBinding: ''
  });

  const [editUserId, setEditUserId] = useState(null);
  const [editData, setEditData] = useState({});

  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      alert('未登入或權限不足');
      navigate('/login');
      return;
    }
    // 讀取使用者列表
    fetch('/admin/users', {
      headers: { Authorization: 'Bearer ' + token }
    })
      .then(res => {
        if(!res.ok) {
          throw new Error('無法取得使用者清單，可能未登入或權限不足');
        }
        return res.json();
      })
      .then(data => setUsers(data))
      .catch(err => setError(err.message))
      .finally(() => setLoading(false));
  }, [navigate]);

  // helper：更新表單輸入
  const handleChange = setter => e => {
    setter(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  // helper：發送 API
  const handleSubmit = (method, url, data, onSuccess) => {
    const token = localStorage.getItem('token');
    fetch(url, {
      method,
      headers: {
        'Content-Type': 'application/json',
        Authorization: 'Bearer ' + token
      },
      body: method === 'GET' || method === 'DELETE' ? null : JSON.stringify(data)
    })
      .then(res => {
        if (!res.ok) {
          throw new Error('操作失敗');
        }
        // 若是DELETE，後端回204 no content，不需解析JSON
        return method === 'DELETE' ? {} : res.json();
      })
      .then(onSuccess)
      .catch(err => alert(err));
  };

  // 新增使用者
  const handleAddUser = () => {
    if(!newUser.email || !newUser.userName || !newUser.password) {
      alert('Email, userName, password 為必填');
      return;
    }
    handleSubmit('POST', '/admin/users', newUser, (createdUser) => {
      setUsers([...users, createdUser]);
      setShowAddForm(false);
      setNewUser({
        email: '',
        userName: '',
        password: '',
        role: 'user',
        plan: 'free',
        serialNumber: '',
        socialBinding: ''
      });
    });
  };

  // 編輯模式：開始編輯
  const startEdit = (user) => {
    setEditUserId(user.id);
    setEditData({...user});
  };

  // 取消編輯
  const cancelEdit = () => {
    setEditUserId(null);
    setEditData({});
  };

  // 儲存編輯
  const saveEdit = (userId) => {
    handleSubmit('PUT', `/admin/users/${userId}`, editData, (updated) => {
      setUsers(users.map(u => u.id === userId ? updated : u));
      cancelEdit();
    });
  };

  // 刪除使用者
  const deleteUser = (userId) => {
    if(!window.confirm('確定要刪除該使用者嗎？')) return;
    handleSubmit('DELETE', `/admin/users/${userId}`, {}, () => {
      setUsers(users.filter(u => u.id !== userId));
    });
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-200 p-8">
      <h1 className="text-3xl font-bold text-orange-500 mb-6">使用者管理 / User Management</h1>

      {loading && <p>載入中...</p>}
      {error && <p className="text-red-500">錯誤：{error}</p>}

      <button
        onClick={() => setShowAddForm(!showAddForm)}
        className="bg-green-600 px-4 py-2 rounded mb-4"
      >
        {showAddForm ? '取消新增' : '新增使用者'}
      </button>

      {/* 新增表單 */}
      {showAddForm && (
        <div className="bg-gray-800 p-4 rounded mb-4 w-full max-w-xl">
          <div className="flex flex-col space-y-2">
            <input
              name="email"
              placeholder="Email"
              value={newUser.email}
              onChange={handleChange(setNewUser)}
              className="p-2 m-1 rounded bg-gray-700"
            />
            <input
              name="userName"
              placeholder="UserName"
              value={newUser.userName}
              onChange={handleChange(setNewUser)}
              className="p-2 m-1 rounded bg-gray-700"
            />
            <input
              name="password"
              type="password"
              placeholder="Password"
              value={newUser.password}
              onChange={handleChange(setNewUser)}
              className="p-2 m-1 rounded bg-gray-700"
            />
            <input
              name="serialNumber"
              placeholder="SerialNumber"
              value={newUser.serialNumber}
              onChange={handleChange(setNewUser)}
              className="p-2 m-1 rounded bg-gray-700"
            />
            <input
              name="socialBinding"
              placeholder="SocialBinding"
              value={newUser.socialBinding}
              onChange={handleChange(setNewUser)}
              className="p-2 m-1 rounded bg-gray-700"
            />
            <select
              name="role"
              value={newUser.role}
              onChange={handleChange(setNewUser)}
              className="p-2 m-1 rounded bg-gray-700"
            >
              <option value="user">使用者(user)</option>
              <option value="admin">管理員(admin)</option>
            </select>
            <select
              name="plan"
              value={newUser.plan}
              onChange={handleChange(setNewUser)}
              className="p-2 m-1 rounded bg-gray-700"
            >
              <option value="free">免費(free)</option>
              <option value="premium">付費(premium)</option>
            </select>
            <button
              onClick={handleAddUser}
              className="bg-orange-500 px-4 py-2 rounded mt-2"
            >
              送出新增
            </button>
          </div>
        </div>
      )}

      <table className="w-full table-auto bg-gray-800">
        <thead className="bg-gray-700">
          <tr>
            {['ID', 'Email', '使用者名稱', '角色', '方案', '付款狀態', '序號', '社群綁定', '操作'].map(h => (
              <th key={h} className="p-2 border-b border-gray-600">
                {h}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {users.map(user => {
            const isEditing = editUserId === user.id;
            return (
              <tr key={user.id} className="hover:bg-gray-700">
                <td className="p-2">{user.id}</td>
                <td className="p-2">
                  {isEditing ? (
                    <input
                      name="email"
                      value={editData.email || ''}
                      onChange={handleChange(setEditData)}
                      className="bg-gray-600 rounded p-1"
                    />
                  ) : (
                    user.email
                  )}
                </td>
                <td className="p-2">
                  {isEditing ? (
                    <input
                      name="userName"
                      value={editData.userName || ''}
                      onChange={handleChange(setEditData)}
                      className="bg-gray-600 rounded p-1"
                    />
                  ) : (
                    user.userName
                  )}
                </td>
                <td className="p-2">
                  {isEditing ? (
                    <select
                      name="role"
                      value={editData.role}
                      onChange={handleChange(setEditData)}
                      className="bg-gray-600 rounded p-1"
                    >
                      <option value="user">使用者</option>
                      <option value="admin">管理員</option>
                    </select>
                  ) : (
                    user.role
                  )}
                </td>
                <td className="p-2">
                  {isEditing ? (
                    <select
                      name="plan"
                      value={editData.plan}
                      onChange={handleChange(setEditData)}
                      className="bg-gray-600 rounded p-1"
                    >
                      <option value="free">免費</option>
                      <option value="premium">付費</option>
                    </select>
                  ) : (
                    user.plan
                  )}
                </td>
                <td className="p-2">
                  {isEditing ? (
                    <select
                      name="isPaid"
                      value={editData.isPaid}
                      onChange={handleChange(setEditData)}
                      className="bg-gray-600 rounded p-1"
                    >
                      <option value="true">已付款</option>
                      <option value="false">未付款</option>
                    </select>
                  ) : (
                    user.isPaid ? '已付款' : '未付款'
                  )}
                </td>
                <td className="p-2">
                  {isEditing ? (
                    <input
                      name="serialNumber"
                      value={editData.serialNumber || ''}
                      onChange={handleChange(setEditData)}
                      className="bg-gray-600 rounded p-1"
                    />
                  ) : (
                    user.serialNumber
                  )}
                </td>
                <td className="p-2">
                  {isEditing ? (
                    <input
                      name="socialBinding"
                      value={editData.socialBinding || ''}
                      onChange={handleChange(setEditData)}
                      className="bg-gray-600 rounded p-1"
                    />
                  ) : (
                    user.socialBinding
                  )}
                </td>
                <td className="p-2 space-x-2">
                  {isEditing ? (
                    <>
                      <button
                        onClick={() => saveEdit(user.id)}
                        className="bg-green-500 px-2 py-1 rounded"
                      >
                        儲存
                      </button>
                      <button
                        onClick={cancelEdit}
                        className="bg-gray-500 px-2 py-1 rounded"
                      >
                        取消
                      </button>
                    </>
                  ) : (
                    <>
                      <button
                        onClick={() => startEdit(user)}
                        className="bg-orange-500 px-2 py-1 rounded"
                      >
                        編輯
                      </button>
                      <button
                        onClick={() => deleteUser(user.id)}
                        className="bg-red-500 px-2 py-1 rounded"
                      >
                        刪除
                      </button>
                    </>
                  )}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>

      <footer className="mt-10 text-center text-sm text-gray-500">
        為紀念我最深愛的曾李素珠奶奶
      </footer>
    </div>
  );
}
