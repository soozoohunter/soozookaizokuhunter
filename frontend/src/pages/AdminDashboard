/***************************************************************
 * frontend/src/pages/AdminDashboard.jsx
 * - 管理後台簡易示範：查看使用者 / 付款紀錄 / 上傳檔案列表
 ***************************************************************/
import React, { useState, useEffect } from 'react';

export default function AdminDashboard() {
  const [token] = useState(localStorage.getItem('token') || '');
  const [error, setError] = useState('');
  const [users, setUsers] = useState([]);
  const [payments, setPayments] = useState([]);
  const [files, setFiles] = useState([]);
  const [section, setSection] = useState('users'); // "users" / "payments" / "files"

  useEffect(() => {
    if (!token) {
      setError('Admin JWT 不存在，請先登入管理後台');
    }
  }, [token]);

  const fetchUsers = async () => {
    try {
      const res = await fetch('/admin/users', {
        headers: { Authorization: 'Bearer ' + token }
      });
      if (!res.ok) throw new Error('HTTP ' + res.status);
      const data = await res.json();
      setUsers(data);
    } catch (err) {
      setError('無法取得使用者列表');
      console.error(err);
    }
  };

  const fetchPayments = async () => {
    try {
      const res = await fetch('/admin/payments', {
        headers: { Authorization: 'Bearer ' + token }
      });
      if (!res.ok) throw new Error('HTTP ' + res.status);
      const data = await res.json();
      setPayments(data);
    } catch (err) {
      setError('無法取得付款紀錄');
      console.error(err);
    }
  };

  const fetchFiles = async () => {
    try {
      const res = await fetch('/admin/files', {
        headers: { Authorization: 'Bearer ' + token }
      });
      if (!res.ok) throw new Error('HTTP ' + res.status);
      const data = await res.json();
      setFiles(data);
    } catch (err) {
      setError('無法取得上傳檔案列表');
      console.error(err);
    }
  };

  const handleSectionChange = (sec) => {
    setSection(sec);
    setError('');
    if (sec === 'users') fetchUsers();
    if (sec === 'payments') fetchPayments();
    if (sec === 'files') fetchFiles();
  };

  if (!token) {
    return (
      <div style={{ padding: '2rem', color: '#fff' }}>
        <h2>Admin Dashboard</h2>
        <p style={{ color: 'red' }}>{error || '請先登入 Admin 才能瀏覽此頁面'}</p>
      </div>
    );
  }

  return (
    <div style={{ padding: '2rem', color: '#fff' }}>
      <h2 style={{ color: '#ff6f00' }}>Admin Dashboard</h2>
      {error && <p style={{ color: 'red' }}>{error}</p>}

      <div style={{ marginBottom: '1rem' }}>
        <button onClick={() => handleSectionChange('users')} style={btnStyle}>View Users</button>
        <button onClick={() => handleSectionChange('payments')} style={btnStyle}>View Payments</button>
        <button onClick={() => handleSectionChange('files')} style={btnStyle}>View Files</button>
      </div>

      {section === 'users' && (
        <div>
          <h3>Users List</h3>
          <ul>
            {users.map(u => (
              <li key={u.id}>
                [ID={u.id}] Email={u.email}, Username={u.username}, Role={u.role}, isPaid={String(u.isPaid)}
              </li>
            ))}
          </ul>
        </div>
      )}

      {section === 'payments' && (
        <div>
          <h3>Payments List</h3>
          <ul>
            {payments.map(p => (
              <li key={p.id}>
                [PaymentID={p.id}] feature={p.feature}, amount={p.amount}, status={p.status}, user_id={p.user_id}
              </li>
            ))}
          </ul>
        </div>
      )}

      {section === 'files' && (
        <div>
          <h3>Uploaded Files</h3>
          <ul>
            {files.map(f => (
              <li key={f.id}>
                [FileID={f.id}] filename={f.filename}, user_id={f.user_id}, fingerprint={f.fingerprint}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

const btnStyle = {
  marginRight: '1rem',
  padding: '0.5rem 1rem',
  backgroundColor: '#ff6f00',
  border: 'none',
  borderRadius: '4px',
  color: '#fff',
  cursor: 'pointer'
};
